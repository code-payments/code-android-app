# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Build and Deploy a new alpha version to the Google Play"
  lane :deploy_alpha do
    #puts "Patch version for this build will be " + ENV["BUILD_NUMBER"]
    gradle(
      task: "clean bundle", #"clean app:bundleRelease",
      build_type: "release",
      properties: {
        #"versionPatch" => ENV["BUILD_NUMBER"],
        "android.injected.signing.store.file" => "key/key",
        "android.injected.signing.store.password" => ENV["STORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["KEY_PASSWORD"]
      }
    )

    validate_play_store_json_key(
      json_key: ENV["SERVICE_ACCOUNT_KEY_JSON"]
    )

    upload_to_play_store(
      track: "alpha",
      aab: Actions.lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH],
      skip_upload_apk: true,
      skip_upload_changelogs: true,
      skip_upload_images: true,
      mapping: Actions.lane_context[SharedValues::GRADLE_MAPPING_TXT_OUTPUT_PATH]
    #  mapping: mapping_file_exists() ? Actions.lane_context[SharedValues::GRADLE_MAPPING_TXT_OUTPUT_PATH] : nil
    )
  end

  desc "Build and Deploy a new internal version to the Google Play"
    lane :deploy_internal do
      #puts "Patch version for this build will be " + ENV["BUILD_NUMBER"]
      gradle(
        task: "clean bundle", #"clean app:bundleRelease",
        build_type: "release",
        properties: {
          #"versionPatch" => ENV["BUILD_NUMBER"],
          "android.injected.signing.store.file" => "key/key",
          "android.injected.signing.store.password" => ENV["STORE_PASSWORD"],
          "android.injected.signing.key.alias" => ENV["KEY_ALIAS"],
          "android.injected.signing.key.password" => ENV["KEY_PASSWORD"]
        }
      )

      validate_play_store_json_key(
        json_key: ENV["SERVICE_ACCOUNT_KEY_JSON"]
      )

      upload_to_play_store(
        track: "internal",
        aab: Actions.lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH],
        skip_upload_apk: true,
        skip_upload_changelogs: true,
        skip_upload_images: true,
        mapping: Actions.lane_context[SharedValues::GRADLE_MAPPING_TXT_OUTPUT_PATH]
      #  mapping: mapping_file_exists() ? Actions.lane_context[SharedValues::GRADLE_MAPPING_TXT_OUTPUT_PATH] : nil
      )
    end
end
