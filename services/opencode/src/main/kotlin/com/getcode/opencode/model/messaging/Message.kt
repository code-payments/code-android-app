package com.getcode.opencode.model.messaging

import com.getcode.ed25519.Ed25519.KeyPair
import com.getcode.model.Domain
import com.getcode.opencode.model.core.ID
import com.getcode.opencode.model.transactions.AirdropType
import com.getcode.opencode.model.transactions.ExchangeData
import com.getcode.opencode.model.transactions.Fee
import com.getcode.opencode.model.transactions.TransactionMetadata
import com.getcode.solana.keys.PublicKey
import com.getcode.solana.keys.Signature

/**
 * @param id the unique identifier of the message, generated by the server and always set when
 *           receiving a message. The server generates this ID to:
 *           <ol>
 *             <li>Reserve the ability to modify ID generation in the future</li>
 *             <li>Prevent clients from attempting to create conflicting message IDs</li>
 *           </ol>
 * @param signature the signature included in a SendMessageRequest, injected by the server to
 *           allow clients to verify that no Man-in-the-Middle (MITM) attacks have
 *           altered the contents of the typed message. This signature is only
 *           applicable to messages not generated by the server.
 *  @param kind The [MessageKind]
 */
data class Message(
    val id: ID,
    val signature: Signature,
    val kind: MessageKind
)

sealed interface MessageKind {

    // region Cash
    /**
     * Represents a request to send a pulled out bill to the specified address.
     * <p>
     * This message type can only be initiated by clients.
     *
     * @param requestor is the Kin token account on Solana to which a payment should be sent.
     */
    data class RequestToGrabBill(
        val requestor: PublicKey
    ): MessageKind

    // endregion

    // region Payment Requests

    /**
     * Request that a bill of a requested value is created and sent to the requested
     * address.
     *
     * > NOTE: This message type is only initiated by clients.
     *
     * @param requestor the Kin token account on Solana to which a payment should be sent.
     * @param exchangeData The exchange data for the requested bill value.
     * Can be either:
     *  - [ExchangeData.WithRate] as an exact amount, with the payment being
     *      guaranteed to transfer the specified quarks in the requested currency and exchange rate.
     *  - [ExchangeData.WithoutRate] as a fiat amount request, with the amount of Kin
     *      being determined at time of payment with a recent exchange rate provided by the paying
     *      client and validated by server.
     *
     * > NOTE: [ExchangeData.WithoutRate] only supports fiat amounts. Use [ExchangeData.WithRate] for Kin.
     *
     * @param domain Optional field that identifies a domain requesting to receive a bill. Domain verification
     * is optional. When verified, clients can establish relationships, and third parties can
     * identify users associated with that account after payment is completed.
     *
     * Note on field requirements:
     *
     * - <b>Verified</b>: All of domain, verifier, signature, and rendezvous_key are required
     * - <b>Unverified</b>: Only domain is required.
     *
     * <p>
     *
     * The third-party's domain name serves as its primary identifier. The server guarantees
     * domain verification against the verifier account.
     *
     * @param verifier Owner account owned by the third party used in domain verification.
     * @param signature Signature of this message using the verifier private key, which in addition
     * to domain verification, authenticates the third party.
     * @param rendezvous Rendezvous key to avoid replay attacks.
     * @param additionalFees Additional fee payments splitting the requested amount. This is in addition
     * to the hard-coded Code $0.01 USD fee.
     *
     */
    data class RequestToReceiveBill(
        val requestor: PublicKey,
        val exchangeData: ExchangeData,
        val domainVerification: DomainVerification?,
        val additionalFees: List<Fee> = emptyList()
    ): MessageKind {
        data class DomainVerification(
            val domain: Domain,
            val verifier: PublicKey,
            val signature: KeyPair,
            val rendezvous: PublicKey
        )
    }

    /**
     * A status update on a stream to indicate a scan code was scanned. This can appear
     * multiple times for the same stream.
     *
     * > NOTE: This message type is only initiated by client.
     *
     * @param timestamp Timestamp the client scanned the code
     */
    data class CodeScanned(
        val timestamp: Long
    ): MessageKind

    /**
     * Payment is rejected by the client
     *
     * > NOTE: This message type is only initiated by client.
     *
     * @param intentId [ID] of the rejected payment
     */
    data class ClientRejectedPayment(
        val intentId: ID
    ): MessageKind

    /**
     * Intent was submitted via SubmitIntent
     *
     * > NOTE: This message type is only initiated by server.
     *
     * @param intentId [ID] of the intent submitted
     * @param metadata Metadata is available for intents where it can be safely propagated publicly.
     * Anything else requires an additional authenticated RPC call (eg. login).
     */
    data class IntentSubmitted(
        val intentId: ID,
        val metadata: TransactionMetadata?
    ): MessageKind

    /**
     * Webhook was successfully called
     *
     * > NOTE: This message type is only initiated by server.
     *
     * @param timestamp Estimated time webhook was received
     */
    data class WebhookCalled(
        val timestamp: Long,
    ): MessageKind

    // endregion

    // endregion

    data object Unknown: MessageKind
}