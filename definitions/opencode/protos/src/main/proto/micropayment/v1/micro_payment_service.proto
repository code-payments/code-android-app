syntax = "proto3";
package code.micropayment.v1;
option go_package = "github.com/code-payments/code-protobuf-api/generated/go/micropayment/v1;micropayment";
option java_package = "com.codeinc.gen.micropayment.v1";
option objc_class_prefix = "APBMicroPaymentV1";
import "common/v1/model.proto";

// todo: Migrate this to a generic "request" service
service MicroPayment {
    // GetStatus gets basic request status
    rpc GetStatus(GetStatusRequest) returns (GetStatusResponse);
    // RegisterWebhook registers a webhook for a request
    //
    // todo: Once Kik codes can encode the entire payment request details, we can
    //       remove the messaging service component and have a Create RPC that
    //       reserves the intent ID with payment details, plus registers the webhook
    //       at the same time. Until that's possible, we're stuck with two RPC calls.
    rpc RegisterWebhook(RegisterWebhookRequest) returns (RegisterWebhookResponse);
}
message GetStatusRequest {
    common.v1.IntentId intent_id = 1;
}
message GetStatusResponse {
    // Does the payment request exist?
    bool exists = 1;
    // Has the user scanned the code at least once?
    bool code_scanned = 2;
    // Has the user sumbmitted a payment?
    bool intent_submitted = 3;
}
message RegisterWebhookRequest {
    common.v1.IntentId intent_id = 1;
    string url = 2 ;
}
message RegisterWebhookResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        // A webhook has already been registered
        ALREADY_REGISTERED = 1;
        // A request does not exist for the provided intent ID
        REQUEST_NOT_FOUND = 2;
        // A user has already submitted a payment
        INTENT_EXISTS = 3;
        // The webhook URL is invalid
        INVALID_URL = 4;
    }
}
