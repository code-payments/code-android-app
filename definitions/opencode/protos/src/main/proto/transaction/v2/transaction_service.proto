syntax = "proto3";
package code.transaction.v2;
option go_package = "github.com/code-payments/code-protobuf-api/generated/go/transaction/v2;transaction";
option java_package = "com.codeinc.opencode.gen.transaction.v2";
option objc_class_prefix = "APBTransactionV2";
import "common/v1/model.proto";
import "google/protobuf/timestamp.proto";

service Transaction {
    // SubmitIntent is the mechanism for client and server to agree upon a set of
    // client actions to execute on the blockchain using the Code sequencer for
    // fulfillment.
    //
    // Transactions and virtual instructions are never exchanged between client and server.
    // Instead, the required accounts and arguments for instructions known to each actor are
    // exchanged to allow independent and local construction.
    //
    // Client and server are expected to fully validate the intent. Proofs will
    // be provided for any parameter requiring one. Signatures should only be
    // generated after approval.
    //
    // This RPC is not a traditional streaming endpoint. It bundles two unary calls
    // to enable DB-level transaction semantics.
    //
    // The high-level happy path flow for the RPC is as follows:
    //   1.  Client initiates a stream and sends SubmitIntentRequest.SubmitActions
    //   2.  Server validates the intent, its actions and metadata
    //   3a. If there are transactions or virtual instructions requiring the user's signature,
    //       then server returns SubmitIntentResponse.ServerParameters
    //   3b. Otherwise, server returns SubmitIntentResponse.Success and closes the
    //       stream
    //   4.  For each transaction or virtual instruction requiring the user's signature, the client
    //       locally constructs it, performs validation and collects the signature
    //   5.  Client sends SubmitIntentRequest.SubmitSignatures with the signature
    //       list generated from 4
    //   6.  Server validates all signatures are submitted and are the expected values
    //       using locally constructed transactions or virtual instructions.
    //   7.  Server returns SubmitIntentResponse.Success and closes the stream
    // In the error case:
    //   * Server will return SubmitIntentResponse.Error and close the stream
    //   * Client will close the stream
    rpc SubmitIntent(stream SubmitIntentRequest) returns (stream SubmitIntentResponse);
    // GetIntentMetadata gets basic metadata on an intent. It can also be used
    // to fetch the status of submitted intents. Metadata exists only for intents
    // that have been successfully submitted.
    rpc GetIntentMetadata(GetIntentMetadataRequest) returns (GetIntentMetadataResponse);
    // GetLimits gets limits for money moving intents for an owner account in an
    // identity-aware manner
    rpc GetLimits(GetLimitsRequest) returns (GetLimitsResponse);
    // CanWithdrawToAccount provides hints to clients for submitting withdraw intents.
    // The RPC indicates if a withdrawal is possible, and how it should be performed.
    rpc CanWithdrawToAccount(CanWithdrawToAccountRequest) returns (CanWithdrawToAccountResponse);
    // Airdrop airdrops core mint tokens to the requesting account
    rpc Airdrop(AirdropRequest) returns (AirdropResponse);
    // Swap performs an on-chain swap. The high-level flow mirrors SubmitIntent
    // closely. However, due to the time-sensitive nature and unreliability of
    // swaps, they do not fit within the broader intent system. This results in
    // a few key differences:
    //  * Transactions are submitted on a best-effort basis outside of the Code
    //    Sequencer within the RPC handler
    //  * Balance changes are applied after the transaction has finalized
    //  * Transactions use recent blockhashes over a nonce
    // SubmitIntent also operates on VM virtual instructions, whereas Swap uses
    // Solana transactions.
    //
    // The transaction will have the following instruction format:
    //   1. ComputeBudget::SetComputeUnitLimit
    //   2. ComputeBudget::SetComputeUnitPrice
    //   3. SwapValidator::PreSwap
    //   4. Dynamic swap instruction
    //   5. SwapValidator::PostSwap
    //
    // Note: Currently limited to swapping USDC to core mint tokens.
    // Note: Core mint tokens are deposited into the token account derived from the VM deposit PDA of the owner account.
    rpc Swap(stream SwapRequest) returns (stream SwapResponse);
    // DeclareFiatOnrampPurchaseAttempt is called whenever a user attempts to use a fiat
    // onramp to purchase core mint tokens for use in Code.
    rpc DeclareFiatOnrampPurchaseAttempt(DeclareFiatOnrampPurchaseAttemptRequest) returns (DeclareFiatOnrampPurchaseAttemptResponse);
}
//
// Request and Response Definitions
//
message SubmitIntentRequest {
    oneof request {
        SubmitActions submit_actions = 1;
        SubmitSignatures submit_signatures = 2;
    }
    message SubmitActions {
        // The globally unique client generated intent ID. Use the original intent
        // ID when operating on actions that mutate the intent.
        common.v1.IntentId id = 1;
        // The verified owner account public key
        common.v1.SolanaAccountId owner = 2;
        // Additional metadata that describes the high-level intention
        Metadata metadata = 3;
        // The set of all ordered actions required to fulfill the intent
        repeated Action actions = 4 ;
        // The signature is of serialize(SubmitActions) without this field set using the
        // private key of the owner account. This provides an authentication mechanism
        // to the RPC.
        common.v1.Signature signature = 5;
        // Deprecated device token
        reserved 6;
    }
    message SubmitSignatures {
        // The set of all signatures for each transaction or virtual instruction requiring
        // signature from the authority accounts.
        //
        // The signature for a transaction is for the marshalled transaction.
        // The signature for a virtual instruction is the hash of the marshalled instruction.
        repeated common.v1.Signature signatures = 1 ;
    }
}
message SubmitIntentResponse {
    oneof response {
        ServerParameters server_parameters = 1;
        Success          success = 2;
        Error            error = 3;
    }
    message ServerParameters {
        // The set of all server paremeters required to fill missing transaction
        // or virtual instruction details. Server guarantees to provide a message
        // for each client action in an order consistent with the received action
        // list. 
        repeated ServerParameter server_parameters = 1 ;
    }
    message Success {
        Code code = 1;
        enum Code {
            // The intent was successfully created and is now scheduled.
            OK = 0;
        }
       // todo: Revisit if we need side-effects. Clients are effecitively doing
       //       local simulation now with the privacy solution.
    }
    message Error {
        Code code = 1;
        enum Code {
            // Denied by a guard (spam, money laundering, etc)
            DENIED = 0;
            // The intent is invalid.
            INVALID_INTENT = 1;
            // There is an issue with provided signatures.
            SIGNATURE_ERROR = 2;
            // Server detected client has stale state.
            STALE_STATE = 3;
        }
        repeated ErrorDetails error_details = 2;
    }
}
message GetIntentMetadataRequest {
    // The intent ID to query
    common.v1.IntentId intent_id = 1;
    // The verified owner account public key when not signing with the rendezvous
    // key. Only owner accounts involved in the intent can access the metadata.
    common.v1.SolanaAccountId owner = 2;
    // The signature is of serialize(GetIntentStatusRequest) without this field set
    // using the private key of the rendezvous or owner account. This provides an
    // authentication mechanism to the RPC.
    common.v1.Signature signature = 3;
}
message GetIntentMetadataResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        NOT_FOUND = 1;
    }
    Metadata metadata = 2;
}
message GetLimitsRequest {
    // The owner account whose limits will be calculated. Any other owner accounts
    // linked with the same identity of the owner will also be applied.
    common.v1.SolanaAccountId owner = 1;
    // The signature is of serialize(GetLimitsRequest) without this field set
    // using the private key of the owner account. This provides an authentication
    // mechanism to the RPC.
    common.v1.Signature signature = 2;
    // All transactions starting at this time will be incorporated into the consumed
    // limit calculation. Clients should set this to the start of the current day in
    // the client's current time zone (because server has no knowledge of this atm).
    google.protobuf.Timestamp consumed_since = 3;
}
message GetLimitsResponse {
    Result result = 1;
    enum Result {
        OK = 0;
    }
    // Send limits keyed by currency
    map<string, SendLimit> send_limits_by_currency = 2;
    reserved 3; // Deprecated deposit limit
    // Micro payment limits keyed by currency
    map<string, MicroPaymentLimit> micro_payment_limits_by_currency = 4;
    // Buy module limits keyed by currency
    map<string, BuyModuleLimit> buy_module_limits_by_currency = 5;
}
message CanWithdrawToAccountRequest {
   common.v1.SolanaAccountId account = 1;
}
message CanWithdrawToAccountResponse {
    // Metadata so the client knows how to withdraw to the account. Server cannot
    // provide precalculated addresses in this response to maintain non-custodial
    // status.
    AccountType account_type = 2;
    enum AccountType {
        Unknown = 0;      // Server cannot determine
        TokenAccount = 1; // Client uses the address as is in SubmitIntent
        OwnerAccount = 2; // Client locally derives the ATA to use in SubmitIntent
    }
    // Server-controlled flag to indicate if the account can be withdrawn to.
    // There are several reasons server may deny it, including:
    //  - Wrong type of Code account
    //  - Not wanting to subsidize the creation of an ATA
    //  - Unsupported external account type (eg. token account but of the wrong mint)
    // This is guaranteed to be false when account_type = Unknown.
    bool is_valid_payment_destination = 1;
    // Token account requires initialization before the withdrawal can occur.
    // Server has chosen not to subsidize the fees. The response is guaranteed
    // to have set is_valid_payment_destination = false in this case.
    bool requires_initialization = 3;
}
message AirdropRequest {
    // The type of airdrop to claim
    AirdropType airdrop_type = 1 ;
    // The owner account to airdrop core mint tokens to
    common.v1.SolanaAccountId owner = 2;
    // The signature is of serialize(AirdropRequest) without this field set
    // using the private key of the owner account. This provides an authentication
    // mechanism to the RPC.
    common.v1.Signature signature = 3;
}
message AirdropResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        // Airdrops are unavailable
        UNAVAILABLE = 1;
        // The airdrop has already been claimed by the owner
        ALREADY_CLAIMED = 2;
    }
    // Exchange data for the amount of core mint tokens airdropped when successful
    ExchangeData exchange_data = 2;
}
message SwapRequest {
    oneof request {
        Initiate        initiate         = 1;
        SubmitSignature submit_signature = 2;
    }
    message Initiate {
        // The verified owner account public key
        common.v1.SolanaAccountId owner = 1;
        // The user authority account that will sign to authorize the swap. Ideally,
        // this is an account derived off the owner account that is solely responsible
        // for swapping.
        common.v1.SolanaAccountId swap_authority = 2;
        // Maximum amount to swap from the source mint, in quarks. If value is set to zero,
        // the entire amount will be swapped.
        uint64 limit = 3;
        // Whether the client wants the RPC to wait for blockchain status. If false,
        // then the RPC will return Success when the swap is submitted to the blockchain.
        // Otherwise, the RPC will observe and report back the status of the transaction.
        bool wait_for_blockchain_status = 4;
        // The signature is of serialize(Initiate) without this field set using the
        // private key of the owner account. This provides an authentication mechanism
        // to the RPC.
        common.v1.Signature signature = 5;
    }
    message SubmitSignature {
        // The signature for the locally constructed swap transaction
        common.v1.Signature signature = 1;
    }
}
message SwapResponse {
    oneof response {
        ServerParameters server_parameters  = 1;
        Success          success            = 2;
        Error            error              = 3;
    }
    message ServerParameters {
        // Subisdizer account that will be paying for the swap
        common.v1.SolanaAccountId payer = 1;
        // Recent blockhash
        common.v1.Blockhash recent_blockhash = 2;
        // Compute unit limit provided to the ComputeBudget::SetComputeUnitLimit
        // instruction. If the value is 0, then the instruction can be omitted.
        uint32 compute_unit_limit = 3;
        // Compute unit price provided in the ComputeBudget::SetComputeUnitPrice
        // instruction. If the value is 0, then the instruction can be omitted.
        uint64 compute_unit_price = 4;
        // On-chain program that will be performing the swap
        common.v1.SolanaAccountId swap_program = 5;
        // Accounts provided to the swap instruction
        repeated common.v1.InstructionAccount swap_ixn_accounts = 6 ;
        // Instruction data for the swap instruction
        bytes swap_ixn_data = 7 ;
        // Maximum quarks that will be sent out of the source account after
        // executing the swap. If not, the validation instruction will cause
        // the transaction to fail.
        uint64 max_to_send = 8;
        // Minimum quarks that will be received into the destination account
        // after executing the swap. If not, the validation instruction will
        // cause the transaction to fail.
        uint64 min_to_receive = 9;
        // Nonce to use in swap validator state account PDA
        common.v1.SolanaAccountId nonce = 10;
    }
    message Success {
        Code code = 1;
        enum Code {
            // The swap was submitted to the blockchain.
            SWAP_SUBMITTED = 0;
            // The swap was finalized on the blockchain.
            SWAP_FINALIZED = 1;
        }
    }
    message Error {
        Code code = 1;
        enum Code {
            // Denied by a guard (spam, money laundering, etc)
            DENIED = 0;
            // There is an issue with the provided signature.
            SIGNATURE_ERROR = 2;
            // The swap failed server-side validation
            INVALID_SWAP = 3;
            // The submitted swap transaction failed. Attempt the swap again.
            SWAP_FAILED = 4;
        }
        repeated ErrorDetails error_details = 2;
    }
}
message DeclareFiatOnrampPurchaseAttemptRequest {
    // The owner account invoking the buy module
    common.v1.SolanaAccountId owner = 1;
    // The amount being purchased
    ExchangeDataWithoutRate purchase_amount = 2;
    // A nonce value unique to the purchase. If it's included in a memo for the
    // transaction for the deposit to the owner, then purchase_amount will be used
    // for display values. Otherwise, the amount will be inferred from the transaction.
    common.v1.UUID nonce = 3;
    // The signature is of serialize(DeclareFiatOnrampPurchaseAttemptRequest) without
    // this field set using the private key of the owner account. This provides an
    // authentication mechanism to the RPC.
    common.v1.Signature signature = 4;
}
message DeclareFiatOnrampPurchaseAttemptResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        // The owner account is not valid (ie. it isn't a Code account)
        INVALID_OWNER = 1;
        // The currency isn't supported
        UNSUPPORTED_CURRENCY = 2;
        // The amount specified exceeds limits
        AMOUNT_EXCEEDS_MAXIMUM = 3;
    }
}
//
// Metadata definitions
//
// Metadata describes the high-level details of an intent
message Metadata {
    oneof type {
        OpenAccountsMetadata             open_accounts              = 1;
        SendPublicPaymentMetadata        send_public_payment        = 6;
        ReceivePaymentsPubliclyMetadata  receive_payments_publicly  = 7;
    }
    reserved 2; // Deprecated SendPrivatePaymentMetadata
    reserved 3; // Deprecated ReceivePaymentsPrivatelyMetadata
    reserved 4; // Deprecated UpgradePrivacyMetadata
    reserved 5; // Deprecated MigrateToPrivacy2022Metadata
    reserved 8; // Deprecated EstablishRelationshipMetadata
}
// Open a set of accounts. Currently, clients should only use this for new users
// to open all required accounts up front..
//
// Action Spec:
//
// for account in [PRIMARY]
//   actions.push_back(OpenAccountAction(account))
message OpenAccountsMetadata {
    // Nothing is currently required
}
// Send a payment to a destination account publicly.
//
// Action Spec (Payment, Withdrawal):
//
// actions = [NoPrivacyTransferAction(PRIMARY, destination, ExchangeData.Quarks)]
//
// Action Spec (Remote Send):
//
// actions = [
//   OpenAccountAction(REMOTE_SEND_GIFT_CARD),
//   NoPrivacyTransferAction(PRIMARY, REMOTE_SEND_GIFT_CARD, ExchangeData.Quarks),
//   NoPrivacyWithdrawAction(REMOTE_SEND_GIFT_CARD, PRIMARY, ExchangeData.Quarks, is_auto_return=true),
// ]
//
// todo: Possibly use a different action type for deferred closing?
message SendPublicPaymentMetadata {
    // The primary account where funds will be sent from. The primary account is assumed if this
    // field is not set for backwards compatibility with old clients.
    common.v1.SolanaAccountId source = 4;
    // The destination token account to send funds to.
    common.v1.SolanaAccountId destination = 1;
    // The exchange data of total funds being sent to the destination
    ExchangeData exchange_data = 2;
    // Is the payment a withdrawal?
    bool is_withdrawal = 3;
    // Is the payment going to a new gift card? Note is_withdrawal must be false.
    bool is_remote_send = 5;
}
// Receive funds into a user-owned account publicly. All use cases of this intent
// close the account, so all funds must be moved.
//
// Action Spec (Remote Send):
//
// actions = [NoPrivacyWithdrawAction(REMOTE_SEND_GIFT_CARD, PRIMARY, quarks)]
message ReceivePaymentsPubliclyMetadata {
    // The remote send gift card to receive funds from
    common.v1.SolanaAccountId source = 1;
    // The exact amount of core mint quarks being received
    uint64 quarks = 2;
    // Is the receipt of funds from a remote send gift card? Currently, this is
    // the only use case for this intent and validation enforces the flag to true.
    bool is_remote_send = 3;
    // If is_remote_send is true, is the gift card being voided? The user owner
    // account's 12 words that issued the gift card may only set this flag to true.
    // Functionally, this doesn't affect the intent, but rather if we decide to show
    // it in a user-friendly payment history.
    bool is_issuer_voiding_gift_card = 4;
    // If is_remote_send is true, the original exchange data that was provided as
    // part of creating the gift card account. This is purely a server-provided value.
    // SubmitIntent will disallow this being set.
    ExchangeData exchange_data = 5;
}
//
// Action Definitions
//
// Action is a well-defined, ordered and small set of transactions or virtual instructions
// for a unit of work that the client wants to perform on the blockchain. Clients provide
// parameters known to them in the action.
message Action {
    // The ID of this action, which is unique within an intent. It must match
    // the index of the action's location in the SubmitAction's actions field.
    uint32 id = 1;
    // The type of action to perform.
    oneof type {
        OpenAccountAction              open_account               = 2;
        NoPrivacyTransferAction        no_privacy_transfer        = 5;
        NoPrivacyWithdrawAction        no_privacy_withdraw        = 6;
        FeePaymentAction               fee_payment                = 10;
    }
    reserved 3; // Deprecated CloseEmptyAccountAction 
    reserved 4; // Deprecated CloseDormantAccountAction
    reserved 7; // Deprecated TemporaryPrivacyTransferAction
    reserved 8; // Deprecated TemporaryPrivacyExchangeAction
    reserved 9; // Deprecated PermanentPrivacyUpgradeAction
}
// No client signature required
message OpenAccountAction {
    // The type of account, which will dictate its intended use
    common.v1.AccountType account_type = 1;
    // The owner of the account. For accounts liked to a user's 12 words, this is
    // the verified parent owner account public key. All other account types should
    // set this to the authority value.
    common.v1.SolanaAccountId owner = 2;
    // The index used to for accounts that are derived from owner
    uint64 index = 3;
    // The public key of the private key that has authority over the opened token account
    common.v1.SolanaAccountId authority = 4;
    // The token account being opened
    common.v1.SolanaAccountId token = 5;
    // The signature is of serialize(OpenAccountAction) without this field set
    // using the private key of the authority account. This provides a proof
    // of authorization to link authority to owner.
    common.v1.Signature authority_signature = 6;
}
// Compact message signature required
message NoPrivacyTransferAction {
    // The public key of the private key that has authority over source
    common.v1.SolanaAccountId authority = 1;
    // The source account where funds are transferred from
    common.v1.SolanaAccountId source = 2;
    // The destination account where funds are transferred to
    common.v1.SolanaAccountId destination = 3;
    // The core mint quark amount to transfer
    uint64 amount = 4;
}
// Compact message signature required
message NoPrivacyWithdrawAction {
    // The public key of the private key that has authority over source
    common.v1.SolanaAccountId authority = 1;
    // The source account where funds are transferred from
    common.v1.SolanaAccountId source = 2;
    // The destination account where funds are transferred to
    common.v1.SolanaAccountId destination = 3;
    // The intended core mint quark amount to withdraw
    uint64 amount = 4;
    // Whether the account is closed afterwards. This is always true, since there
    // are no current se cases to leave it open.
    bool should_close = 5;
    // Whether this action is for an auto-return, which client allows server to defer
    // scheduling at its own discretion to return funds back to the owner (to their primary
    // account) that funded source.
    bool is_auto_return = 6;
}
// Compact message signature required
message FeePaymentAction {
    // The type of fee being operated on
    FeeType type = 4;
    enum FeeType {
        CODE        = 0; // Hardcoded $0.01 USD fee to a dynamic fee account specified by server
        THIRD_PARTY = 1; // Third party fee specified at time of payment request
    }
    // The public key of the private key that has authority over source
    common.v1.SolanaAccountId authority = 1;
    // The source account where funds are transferred from
    common.v1.SolanaAccountId source = 2;
    // The core mint quark amount to transfer
    uint64 amount = 3;
    // The destination where the fee payment is being made for fees outside of
    // Code.
    common.v1.SolanaAccountId destination = 5;
}
//
// Server Parameter Definitions
//
// ServerParameter are a set of parameters known and returned by server that
// enables clients to complete transaction construction. Any necessary proofs,
// which are required to be locally verifiable, are also provided to ensure
// safe use in the event of a malicious server.
message ServerParameter {
    // The action the server parameters belong to
    uint32 action_id = 1;
    // The set of nonces used for the action. Server will only provide values
    // for transactions requiring client signatures.
    repeated NoncedTransactionMetadata nonces = 2 ;
    // The type of server parameter which maps to the type of action requested
    oneof type {
        OpenAccountServerParameter              open_account               = 3;
        NoPrivacyTransferServerParameter        no_privacy_transfer        = 6;
        NoPrivacyWithdrawServerParameter        no_privacy_withdraw        = 7;
        FeePaymentServerParameter               fee_payment                = 11;
    }
    reserved 4; // Deprecated CloseEmptyAccountServerParameter
    reserved 5; // Deprecated CloseDormantAccountServerParameter
    reserved 8; // Deprecated TemporaryPrivacyTransferServerParameter
    reserved 9; // Deprecated TemporaryPrivacyExchangeServerParameter
    reserved 10; // Deprecated PermanentPrivacyUpgradeServerParameter
}
// For transactions, the nonce is a standard nonce on Solana
// For virtual instructions, the nonce is a virtual nonce on the Code VM
message NoncedTransactionMetadata {
    // The nonce account to use in the system::AdvanceNonce instruction
    common.v1.SolanaAccountId nonce = 1;
    // The blockhash to set in the transaction or virtual instruction
    common.v1.Blockhash blockhash = 2;
}
message OpenAccountServerParameter {
    // There are no transactions requiring client signatures
}
message NoPrivacyTransferServerParameter {
    // There are no action-specific server parameters
}
message NoPrivacyWithdrawServerParameter {
    // There are no action-specific server parameters
}
message FeePaymentServerParameter {
    // The destination account where Code fee payments should be sent. This will
    // only be set when the corresponding FeePaymentAction Type is CODE.
    common.v1.SolanaAccountId code_destination = 1;
}
//
// Structured Error Definitions
//
message ErrorDetails {
    oneof type {
        ReasonStringErrorDetails     reason_string     = 1;
        InvalidSignatureErrorDetails invalid_signature = 2;
        DeniedErrorDetails           denied            = 3;
    }
}
message ReasonStringErrorDetails {
    // Human readable string indicating the failure.
    string reason = 1 ;
}
message InvalidSignatureErrorDetails {
    // The action whose signature mismatched
    uint32 action_id = 1;
    oneof expected_blob {
        // The transaction the server expected to have signed.
        common.v1.Transaction expected_transaction = 2;
         // The virtual ixn hash the server expected to have signed.
        common.v1.Hash expected_vixn_hash = 4;
    }
    // The signature that was provided by the client.
    common.v1.Signature provided_signature = 3;
}
message DeniedErrorDetails {
    Code code = 1;
    enum Code {
        // Reason code not yet defined
        UNSPECIFIED = 0;
    }
    // Human readable string indicating the failure.
    string reason = 2 ;
}
//
// Other Model Definitions
//
// ExchangeData defines an amount of crypto with currency exchange data
message ExchangeData {
    // ISO 4217 alpha-3 currency code.
    string currency = 1;
    // The agreed upon exchange rate. This might not be the same as the
    // actual exchange rate at the time of intent or fund transfer.
    double exchange_rate = 2;
    // The agreed upon transfer amount in the currency the payment was made
    // in.
    double native_amount = 3;
    // The exact amount of quarks to send. This will be used as the source of
    // truth for validating transaction transfer amounts.
    uint64 quarks = 4;
}
message ExchangeDataWithoutRate {
    // ISO 4217 alpha-3 currency code.
    string currency = 1;
    // The agreed upon transfer amount in the currency the payment was made
    // in.
    double native_amount = 2;
}
message AdditionalFeePayment {
    // Destination token account where the fee payment will be made
    common.v1.SolanaAccountId destination = 1;
    // Fee percentage, in basis points, of the total quark amount of a payment.
    uint32 fee_bps = 2 ;
}
message SendLimit {
    // Remaining limit to apply on the next transaction
    float next_transaction = 1;
    // Maximum allowed on a per-transaction basis
    float max_per_transaction = 2;
    // Maximum allowed on a per-day basis
    float max_per_day = 3;
}
message MicroPaymentLimit {
    // Maximum native amount that can be applied per micro payment transaction
    float max_per_transaction = 1;
    // Minimum native amount that can be applied per micro payment transaction
    float min_per_transaction = 2;
}
message BuyModuleLimit {
    // Minimum amount that can be purchased through the buy module
    float min_per_transaction = 1;
    // Maximum amount that can be purchased through the buy module
    float max_per_transaction = 2;
}
message Cursor {
    bytes value = 1 ;
}
enum AirdropType {
    UNKNOWN = 0;
    // Reward for giving someone else their first crypto
    GIVE_FIRST_CRYPTO = 1;
    // Airdrop for getting a user started with first crypto balance
    GET_FIRST_CRYPTO = 2;
}
