syntax = "proto3";
package flipchat.chat.v1;
option go_package = "github.com/code-payments/flipchat-protobuf-api/generated/go/chat/v1;chatpb";
option java_package = "com.codeinc.flipchat.gen.chat.v1";
option objc_class_prefix = "FCPBChatV1";
import "common/v1/common.proto";
import "messaging/v1/model.proto";
import "profile/v1/model.proto";
import "google/protobuf/timestamp.proto";

service Chat {
    // StreamChatEvents streams all chat events for the requesting user.
    //
    // Chat events will include any update to a chat, including:
    //   1. Metadata changes.
    //   2. Membership changes.
    //   3. Latest messages.
    //
    // The server will optionally filter out some events depending on load
    // and chat type. For example, Broadcast chats may not receive latest
    // messages.
    //
    // Clients should use GetMessages to backfill in any historical messages
    // for a chat. It should be sufficient to rely on ChatEvents for some types
    // of chats, but using StreamMessages provides a guarentee of message events
    // for all chats.
    rpc StreamChatEvents(stream StreamChatEventsRequest) returns (stream StreamChatEventsResponse);
    // GetChats gets the set of chats for an owner account using a paged API.
    // This RPC is aware of all identities tied to the owner account.
    rpc GetChats(GetChatsRequest) returns (GetChatsResponse);
    // GetChat returns the metadata for a specific chat.
    rpc GetChat(GetChatRequest) returns (GetChatResponse);
    // StartChat starts a chat. The RPC call is idempotent and will use existing
    // chats whenever applicable within the context of message routing.
    rpc StartChat(StartChatRequest) returns (StartChatResponse);
    // JoinChat joins a given chat.
    rpc JoinChat(JoinChatRequest) returns (JoinChatResponse);
    // LeaveChat leaves a given chat.
    rpc LeaveChat(LeaveChatRequest) returns (LeaveChatResponse);
    // OpenChat opens a chat up for messaging across all members
    rpc OpenChat(OpenChatRequest) returns (OpenChatResponse);
    // CloseChat closes a chat up for messaging to just the chat owner
    rpc CloseChat(CloseChatRequest) returns (CloseChatResponse);
    // CheckDisplayName checks whether a chat display name passes moderation
    rpc CheckDisplayName(CheckDisplayNameRequest) returns (CheckDisplayNameResponse);
    // SetDisplayName sets a chat's display name. If the display name isn't allowed,
    // then a set of alternate suggestions may be provided
    rpc SetDisplayName(SetDisplayNameRequest) returns (SetDisplayNameResponse);
    // SetDescription sets a chat's description
    rpc SetDescription(SetDescriptionRequest) returns (SetDescriptionResponse);
    // SetCoverCharge sets a chat's cover charge
    //
    // Deprecated: Use SetMessagingFee instead
    rpc SetCoverCharge(SetCoverChargeRequest) returns (SetCoverChargeResponse);
    // SetMessagingFee sets a chat's messaging fee
    rpc SetMessagingFee(SetMessagingFeeRequest) returns (SetMessagingFeeResponse);
    // GetMemberUpdates gets member updates for a given chat
    rpc GetMemberUpdates(GetMemberUpdatesRequest) returns (GetMemberUpdatesResponse);
    // PromoteUser promotes a user to an elevated permission state
    rpc PromoteUser(PromoteUserRequest) returns (PromoteUserResponse);
    // DemoteUser demotes a user to a lower permission state
    rpc DemoteUser(DemoteUserRequest) returns (DemoteUserResponse);
    // RemoveUser removes a user from a chat
    rpc RemoveUser(RemoveUserRequest) returns (RemoveUserResponse);
    // MuteUser mutes a user in the chat and removes their ability to send messages
    rpc MuteUser(MuteUserRequest) returns (MuteUserResponse);
    // MuteChat mutes a chat and disables push notifications
    rpc MuteChat(MuteChatRequest) returns (MuteChatResponse);
    // UnmuteChat unmutes a chat and enables push notifications
    rpc UnmuteChat(UnmuteChatRequest) returns (UnmuteChatResponse);
    // ReportUser reports a user for a given message
    //
    // todo: might belong in a different service long-term
    rpc ReportUser(ReportUserRequest) returns (ReportUserResponse);
}
message StreamChatEventsRequest {
    oneof type {
        Params params = 1;
        common.v1.ClientPong pong = 2;
    }
    message Params {
        common.v1.Auth auth = 1;
        // ts contains the time for stream open.
        //
        // It is used primarily as a nonce for auth. Server may reject
        // timestamps that are too far in the future or past.
        google.protobuf.Timestamp ts = 2;
    }
}
message StreamChatEventsResponse {
    oneof type {
        common.v1.ServerPing ping = 1;
        StreamError error = 2;
        EventBatch events = 3;
    }
    message StreamError {
        Code code = 1;
        enum Code {
            DENIED = 0;
        }
    }
    message EventBatch {
        repeated ChatUpdate updates = 1 ;
    }
    // ChatUpdate contains a set of updates for a given chat id.
    //
    // Only the relevant fields will be set on update. On initial
    // stream open, all fields will be set, however.
    message ChatUpdate {
        common.v1.ChatId chat_id = 1;
        // Metadata contains the latest (full) chat metadata.
        //
        // Deprecated: Use metadata_updates instead. For backwards compatibility
        // this will only contain full metadata refreshes.
        Metadata metadata = 2;
        // MetadataUpdate contains updates to a chat metadata
        repeated MetadataUpdate metadata_updates = 7;
        // MemberUpdate contains an update to the membership set.
        //
        // Deprecated: Use member_updates instead. For backwards compatibility
        // this will only contain full member refreshes.
        MemberUpdate member_update = 3;
        // MemberUpdate contains updates to the membership set.
        repeated MemberUpdate member_updates = 8;
        // Message contains the last known message of the chat.
        messaging.v1.Message last_message = 4;
        // Relevant update to a chat member's pointer state, where 'relevant' means
        // "relevant to UI updates". For example, when a user has read the latest
        // message.
        //
        // Note: Updates now go through the message stream, but may be rediverted here
        // in the future
        messaging.v1.PointerUpdate pointer = 5;
        // IsTyping indicates whether or not someone is typing in the group.
        //
        // Note: Updates now go through the message stream, but may be rediverted here
        // in the future
        messaging.v1.IsTyping is_typing = 6;
    }
}
message GetChatsRequest {
    common.v1.QueryOptions query_options = 1;
    common.v1.Auth auth = 2;
}
message GetChatsResponse {
    Result result = 1;
    enum Result {
        OK = 0;
    }
    repeated Metadata chats = 2 ;
}
message GetChatRequest {
    oneof identifier {
        common.v1.ChatId chat_id = 1;
        uint64 room_number = 2;
    }
    bool exclude_members = 9;
    // Auth is an optional field that authenticates the call, which
    // can be used to fill out extra information in the Metadata.
    common.v1.Auth auth = 10;
}
message GetChatResponse {
    Result result = 1;
    enum Result {
        OK        = 0;
        NOT_FOUND = 1;
    }
    // Metadata is the chat metadata, if result == OK.
    //
    // The contents of the metadata may change whether or not the
    // call was authenticated.
    Metadata metadata = 2;
    // Members contains the chat members, if result == OK and were requested.
    repeated Member members = 3;
}
message StartChatRequest {
    oneof parameters {
        StartTwoWayChatParameters two_way_chat = 1;
        StartGroupChatParameters group_chat = 2;
    }
    // StartTwoWayChatParameters contains the parameters required to start
    // or recover a two way chat between the caller and the specified 'other_user'.
    //
    // The 'other_user' is currently the 'tip_address', normally retrieved from
    // user.Identity.GetTwitterUser(username).
    message StartTwoWayChatParameters {
        // The account id of the user the caller wishes to chat with.
        common.v1.UserId other_user_id = 1;
    }
    message StartGroupChatParameters {
        // A set of users (not including self) to initially set in the group chat.
        repeated common.v1.UserId users = 1 ;
        // Optional display name for the group chat
        string display_name = 2 ;
        // Optional payment for creating the group. It's up to server to decide
        // if the user is allowed to create a group without payment.
        common.v1.IntentId payment_intent = 3;
    }
    common.v1.Auth auth = 10;
}
message StartChatResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        // DENIED indicates the caller is not allowed to start/join the chat.
        DENIED = 1;
        // USER_NOT_FOUND indicates that (one of) the target user's was not found.
        USER_NOT_FOUND = 2;
    }
    // The chat to use, if result == OK.
    Metadata chat = 2;
    // Members contains the chat members, if result == OK.
    repeated Member members = 3;
}
message StartGroupChatPaymentMetadata {
    // The user creating the group chat, who will be the initial owner
    common.v1.UserId user_id = 1;
}
message JoinChatRequest {
    oneof identifier {
        common.v1.ChatId chat_id = 1;
        uint64 room_id = 2;
    }
    // Does the user want to join without the ability to send messages in the chat?
    // If so, then payment_intent is not required? Otherwise, it is.
    bool without_send_permission = 8;
    // The payment for joining a chat, which is required for sending messages in
    // the chat.
    //
    // Note: The chat owner can always bypass payment.
    common.v1.IntentId payment_intent = 9;
    common.v1.Auth auth = 10;
}
message JoinChatResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        DENIED = 1;
    }
    // The chat metadata, if join was successful.
    Metadata metadata = 2;
    // The members of the chat, if join was successful.
    repeated Member members = 3;
}
message JoinChatPaymentMetadata {
    // The user joining the chat
    common.v1.UserId user_id = 1;
    // The chat that the user is joining
    common.v1.ChatId chat_id = 2;
}
message LeaveChatRequest {
    common.v1.ChatId chat_id = 1;
    common.v1.Auth auth = 2;
}
message LeaveChatResponse {
    Result result = 1;
    enum Result {
        OK = 0;
    }
}
message OpenChatRequest {
    // The chat that is being opened
    common.v1.ChatId chat_id = 1;
    common.v1.Auth auth = 2;
}
message OpenChatResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        DENIED = 1;
    }
}
message CloseChatRequest {
    /// The chat that is being closed
    common.v1.ChatId chat_id = 1;
    common.v1.Auth auth = 2;
}
message CloseChatResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        DENIED = 1;
    }
}
message CheckDisplayNameRequest {
    string display_name = 1 ;
}
message CheckDisplayNameResponse {
    Result result = 1;
    enum Result {
        OK = 0;
    }
    bool is_allowed = 2;
}
message SetDisplayNameRequest {
    common.v1.ChatId chat_id = 1;
    string display_name = 2 ;
    common.v1.Auth auth = 3;
}
message SetDisplayNameResponse {
    Result result = 1;
    enum Result {
        OK       = 0;
        DENIED   = 1;
        CANT_SET = 2;
    }
    repeated string alternate_suggestions = 2 ;
}
message SetDescriptionRequest {
    common.v1.ChatId chat_id = 1;
    string description = 2 ;
    common.v1.Auth auth = 3;
}
message SetDescriptionResponse {
    Result result = 1;
    enum Result {
        OK       = 0;
        DENIED   = 1;
        CANT_SET = 2;
    }
}
message SetCoverChargeRequest {
    common.v1.ChatId chat_id = 1;
    common.v1.PaymentAmount cover_charge = 2;
    common.v1.Auth auth = 3;
}
message SetCoverChargeResponse {
    Result result = 1;
    enum Result {
        OK       = 0;
        DENIED   = 1;
        CANT_SET = 2;
    }
}
message SetMessagingFeeRequest {
    common.v1.ChatId chat_id = 1;
    common.v1.PaymentAmount messaging_fee = 2;
    common.v1.Auth auth = 3;
}
message SetMessagingFeeResponse {
    Result result = 1;
    enum Result {
        OK       = 0;
        DENIED   = 1;
        CANT_SET = 2;
    }
}
message GetMemberUpdatesRequest {
    common.v1.ChatId chat_id = 1;
    // If not provided, a full refresh is performed. Server may also choose
    // to compact updates into a full or individual refresh.
    common.v1.PagingToken paging_token = 2;
    // Auth is an optional field that authenticates the call, which
    // can be used to fill out extra information.
    common.v1.Auth auth = 3;
}
message GetMemberUpdatesResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        NOT_FOUND = 1;
    }
    repeated MemberUpdate updates = 2 ;
}
message PromoteUserRequest {
    common.v1.ChatId chat_id = 1;
    common.v1.UserId user_id = 2;
    // Enables send permissions when value is true
    bool enable_send_permission = 3;
    common.v1.Auth auth = 100;
}
message PromoteUserResponse {
    Result result = 1;
    enum Result {
        OK             = 0;
        DENIED         = 1;
        NOT_REGISTERED = 2;
    }
}
message DemoteUserRequest {
    common.v1.ChatId chat_id = 1;
    common.v1.UserId user_id = 2;
    // Disables send permissions when value is true
    bool disable_send_permission = 3;
    common.v1.Auth auth = 100;
}
message DemoteUserResponse {
    Result result = 1;
    enum Result {
        OK       = 0;
        DENIED   = 1;
    }
}
message RemoveUserRequest{
    common.v1.ChatId chat_id = 1;
    common.v1.UserId user_id = 2;
    common.v1.Auth auth = 3;
}
message RemoveUserResponse{
    Result result = 1;
    enum Result {
        OK       = 0;
        DENIED   = 1;
    }
}
message MuteUserRequest{
    common.v1.ChatId chat_id = 1;
    common.v1.UserId user_id = 2;
    common.v1.Auth auth = 3;
}
message MuteUserResponse{
    Result result = 1;
    enum Result {
        OK       = 0;
        DENIED   = 1;
    }
}
message MuteChatRequest {
    common.v1.ChatId chat_id = 1;
    common.v1.Auth auth = 2;
}
message MuteChatResponse {
    Result result = 1;
    enum Result {
        OK       = 0;
        DENIED   = 1;
    }
}
message UnmuteChatRequest {
    common.v1.ChatId chat_id = 1;
    common.v1.Auth auth = 2;
}
message UnmuteChatResponse {
    Result result = 1;
    enum Result {
        OK       = 0;
        DENIED   = 1;
    }
}
message ReportUserRequest{
    common.v1.UserId user_id = 1;
    messaging.v1.MessageId message_id = 2;
    common.v1.Auth auth = 3;
}
message ReportUserResponse{
    Result result = 1;
    enum Result {
        OK       = 0;
    }
}
message Metadata {
    common.v1.ChatId chat_id = 1;
    // The type of chat
    ChatType type = 2 ;
    enum ChatType {
        UNKNOWN = 0;
        TWO_WAY = 1;
        GROUP   = 2;
    }
    // The chat display name
    string display_name = 3 ;
    // If non-zero, the room number associated with the chat.
    uint64 room_number = 4;
    // Are push notifications enabled for this chat (from the perspective of the caller)?
    bool is_push_enabled = 5;
    // Can the user disable push notifications for this chat using MuteChat?
    bool can_disable_push = 6;
    // Number of (estimated) unread message (from the perspective of the caller).
    uint32 num_unread = 7;
    // If there are more unread messages than indicated by num_unread. If this is
    // true, client should show num_unread+ as the unread count.
    bool has_more_unread = 11;
    // Owner is the owner/creator of the chat.
    //
    // This is a super priviledge role, in which there can only be one.
    // This role is displayed as a 'host' currently.
    common.v1.UserId owner = 8;
    // If present, the fee that must be paid to send a message as a non-regular
    // chat member.
    //
    // This replaces the legacy cover charge mechanic, which is deprecated
    common.v1.PaymentAmount messaging_fee = 9;
    // The timestamp of the last activity in this chat
    google.protobuf.Timestamp last_activity = 10;
    // The status as to whether the room is open or closed. This may be
    // omitted for chats where it doesn't apply. If not provided, it's
    // safe to assume the chat is open indefinitely until otherwise provided.
    OpenStatus open_status = 12;
    // Chat description
    string description = 13 ;
}
// todo: In the future, we may add additional fields like open/closed until a timestamp, etc.
//       For backwards compatibility, client can always refer to is_currently_open for whether
//       a room is open right now or not for the purposes of sending messages.
// todo: A better name for this
message OpenStatus {
    bool is_currently_open = 1;
}
message MetadataUpdate {
    oneof kind {
        FullRefresh         full_refresh          = 1;
        UnreadCountChanged  unread_count_changed  = 2;
        DisplayNameChanged  display_name_changed  = 3;
        MessagingFeeChanged messaging_fee_changed = 4;
        LastActivityChanged last_activity_changed = 5;
        OpenStatusChanged   open_status_changed   = 6;
        DescriptionChanged  description_changed   = 7;
    }
    // Refreshes the entire chat metadata
    message FullRefresh {
        Metadata metadata = 1;
    }
    // New message in the chat has generated a new unread count
    message UnreadCountChanged {
        // Number of (estimated) unread message
        uint32 num_unread = 1;
        // If there are more unread messages than indicated by num_unread.
        // If this is true, client should show num_unread+ as the unread count.
        bool has_more_unread = 2;
    }
    // The chat display name has been updated to a new value
    message DisplayNameChanged {
        string new_display_name = 1 ;
    }
    // The chat messaging fee has been updated to a new value
    message MessagingFeeChanged {
        common.v1.PaymentAmount new_messaging_fee = 1;
    }
    // The last activity timestamp has changed to a newer value
    message LastActivityChanged {
        google.protobuf.Timestamp new_last_activity = 1;
    }
    // The open status has changed to a newer value
    message OpenStatusChanged {
        OpenStatus new_open_status = 1;
    }
    message DescriptionChanged {
        string new_description = 1 ;
    }
}
message Member {
    common.v1.UserId user_id = 1;
    // The chat member's identity/profile information.
    //
    // It is a light weight version of the users full profile, which
    // can be retrieved from the Profile service.
    MemberIdentity identity = 2;
    // Chat message state for this member.
    //
    // If set, the list may contain DELIVERED and READ pointers. SENT pointers
    // are only shared between the sender and server, to indicate persistence.
    //
    // The server may wish to omit all pointers in various types of group chats
    // or as relief valves.
    repeated messaging.v1.Pointer pointers = 3 ;
    // If the member is the caller (where applicable), will be set to true.
    bool is_self = 4;
    // Does the chat member have permission to perform moderation actions in
    // the chat?
    bool has_moderator_permission = 5;
    // Has the chat member been muted by a moderator? If so, they cannot send
    // messages, even if they paid for the permission.
    bool is_muted = 6;
    // Does the chat member have permission to send messages in the chat? If
    // not, the user is considered to be a spectator or listener. Otherwise,
    // they are a speaker.
    bool has_send_permission = 7;
}
message MemberIdentity {
    // If present, the display name of the user.
    string display_name = 1 ;
    // If present, the URL of the users profile pic.
    string profile_pic_url = 2 ;
    // The linked social profiles of the user
    repeated profile.v1.SocialProfile social_profiles = 3 ;
}
message MemberUpdate {
    oneof kind {
        FullRefresh       full_refresh       = 1;
        IndividualRefresh individual_refresh = 2;
        Joined            joined             = 3;
        Left              left               = 4;
        Removed           removed            = 5;
        Muted             muted              = 6;
        Promoted          promoted           = 7;
        Demoted           demoted            = 8;
        IdentityChanged   identity_changed   = 9;
    }
    common.v1.PagingToken paging_token = 1000;
    // Refreshes the state of the entire chat membership
    message FullRefresh {
        repeated Member members = 1 ;
    }
    // Refreshes the state of an individual member in the chat
    message IndividualRefresh {
        Member member = 1;
    }
    // Member joined the chat via the JoinChat RPC
    message Joined {
        Member member = 1;
    }
    // Member left the chat via the LeaveChat RPC
    message Left {
        common.v1.UserId member = 1;
    }
    // Member was removed from the chat via the RemoveUser RPC
    message Removed {
        common.v1.UserId member = 1;
        common.v1.UserId removed_by = 2;
    }
    // Member was muted in the chat via the MuteUser RPC
    message Muted {
        common.v1.UserId member = 1;
        common.v1.UserId muted_by = 2;
    }
    // Member was promoted in the chat via the PromoteUser RPC
    message Promoted {
        common.v1.UserId member = 1;
        common.v1.UserId promoted_by = 2;
        bool send_permission_enabled = 3;
    }
    // Member was demoted in the chat via the DemoteUser RPC
    message Demoted {
        common.v1.UserId member = 1;
        common.v1.UserId demoted_by = 2;
        bool send_permission_disabled = 3;
    }
    // Member identity has changed
    message IdentityChanged {
        common.v1.UserId member = 1;
        MemberIdentity new_identity = 2;
    }
}
