syntax = "proto3";
package flipchat.messaging.v1;
option go_package = "github.com/code-payments/flipchat-protobuf-api/generated/go/messaging/v1;messagingpb";
option java_package = "com.codeinc.flipchat.gen.messaging.v1";
option objc_class_prefix = "FCPBMessagingV1";
import "common/v1/common.proto";
import "messaging/v1/model.proto";

service Messaging {
    // StreamMessages streams all messages/message states for the requested chat.
    rpc StreamMessages(stream StreamMessagesRequest) returns (stream StreamMessagesResponse);
    // GetMessage gets a single message in a chat
    rpc GetMessage(GetMessageRequest) returns (GetMessageResponse);
    // GetMessages gets the set of messages for a chat using a paged and batched APIs
    rpc GetMessages(GetMessagesRequest) returns (GetMessagesResponse);
    // SendMessage sends a message to a chat.
    rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
    // AdvancePointer advances a pointer in message history for a chat member.
    rpc AdvancePointer(AdvancePointerRequest) returns (AdvancePointerResponse);
    // NotifyIsTypingRequest notifies a chat that the sending member is typing.
    //
    // These requests are transient, and may be dropped at any point.
    rpc NotifyIsTyping(NotifyIsTypingRequest) returns (NotifyIsTypingResponse);
}
message StreamMessagesRequest {
    oneof type {
        Params params = 1;
        common.v1.ClientPong pong = 2;
    }
    message Params {
        common.v1.ChatId chat_id = 1;
        // Deprecated: stream flushes are no longer supported
        oneof resume {
            MessageId last_known_message_id = 2;
            bool latest_only = 3;
        }
		common.v1.Auth auth = 4;
    }
}
message StreamMessagesResponse {
    oneof type {
        common.v1.ServerPing ping = 1;
        StreamError error = 2;
        MessageBatch messages = 3;
    }
    message StreamError {
        Code code = 1;
        enum Code {
            DENIED = 0;
        }
    }
}
message GetMessageRequest {
    common.v1.ChatId chat_id = 1;
    MessageId message_id = 2;
    common.v1.Auth auth = 3;
}
message GetMessageResponse {
    Result result = 1;
    enum Result {
        OK        = 0;
        DENIED    = 1;
        NOT_FOUND = 2;
    }
    Message message = 2;
}
message GetMessagesRequest {
    common.v1.ChatId chat_id = 1;
    // If not set, defaults to an ascending query option without a page token and server-defined limit
    oneof query {
        common.v1.QueryOptions options      = 2;
        MessageIdBatch         message_ids  = 3;
    }
    common.v1.Auth auth = 5;
}
message GetMessagesResponse {
    Result result = 1;
    enum Result {
        OK     = 0;
        DENIED = 1;
    }
    repeated Message messages = 2 ;
}
message SendMessageRequest {
    common.v1.ChatId chat_id = 1;
    // Allowed content types that can be sent by client:
    //  - TextContent
    //  - ReactionContent
    //  - ReplyContent
    //  - TipContent
    //  - DeleteMessageContent
    repeated Content content = 2 ;
    common.v1.Auth auth = 3;
    // Intent ID for message contents that require a payment
    common.v1.IntentId payment_intent = 4;
}
message SendMessageResponse {
    Result result = 1;
    enum Result {
        OK     = 0;
        DENIED = 1;
    }
    // The chat message that was sent if the RPC was succesful, which includes
    // server-side metadata like the generated message ID and official timestamp
    Message message = 2;
}
message SendTipMessagePaymentMetadata {
    // The chat where the message is being tipped
    common.v1.ChatId chat_id = 1;
    // The message that is being tipped
    MessageId message_id = 2;
    // The user sending the tip
    common.v1.UserId tipper_id = 3;
}
message AdvancePointerRequest {
    common.v1.ChatId chat_id = 1;
    Pointer pointer = 2;
	common.v1.Auth auth = 3;
}
message AdvancePointerResponse {
    Result result = 1;
    enum Result {
        OK                = 0;
        DENIED            = 1;
        MESSAGE_NOT_FOUND = 2;
    }
}
message NotifyIsTypingRequest {
    common.v1.ChatId chat_id = 1;
    bool is_typing = 2;
	common.v1.Auth auth = 3;
}
message NotifyIsTypingResponse {
    Result result = 1;
    enum Result {
        OK             = 0;
        DENIED         = 1;
    }
}
