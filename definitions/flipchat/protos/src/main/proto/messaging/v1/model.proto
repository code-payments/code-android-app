syntax = "proto3";
package flipchat.messaging.v1;
option go_package = "github.com/code-payments/flipchat-protobuf-api/generated/go/messaging/v1;messagingpb";
option java_package = "com.codeinc.flipchat.gen.messaging.v1";
option objc_class_prefix = "FCPBMessagingV1";
import "common/v1/common.proto";
import "google/protobuf/timestamp.proto";

message MessageId {
    // A lexicographically sortable ID that can be used to sort source of
    // chat history.
    bytes value = 1 ;
}
// A message in a chat
message Message {
    // Globally unique ID for this message
    MessageId message_id = 1;
    // The chat member that sent the message. For NOTIFICATION chats, this field
    // is omitted since the chat has exactly 1 member.
    common.v1.UserId sender_id = 2;
    // Message content, which is currently guaranteed to have exactly one item.
    repeated Content content = 3 ;
    // Timestamp this message was generated at. This value is also encoded in
    // any time-based UUID message IDs.
    google.protobuf.Timestamp ts = 4;
}
// Pointer in a chat indicating a user's message history state in a chat.
message Pointer {
    // The type of pointer indicates which user's message history state can be
    // inferred from the pointer value. It is also possible to infer cross-pointer
    // state. For example, if a chat member has a READ pointer for a message with
    // ID N, then the DELIVERED pointer must be at least N.
    Type type = 1 ;
    enum Type {
        UNKNOWN   = 0;
        SENT      = 1; // Always inferred by OK result in SendMessageResponse or message presence in a chat
        DELIVERED = 2;
        READ      = 3;
    }
    // Everything at or before this message ID is considered to have the state
    // inferred by the type of pointer.
    MessageId value = 2;
}
message IsTyping {
    common.v1.UserId user_id = 1;
    // is_typing indicates whether or not the user is typing.
    // If false, the user has explicitly stopped typing.
    bool is_typing = 2;
}
// Content for a chat message
message Content {
    oneof type {
        TextContent                   text                    = 1;
        LocalizedAnnouncementContent  localized_announcement  = 2;
        ReactionContent               reaction                = 5;
        ReplyContent                  reply                   = 6;
        TipContent                    tip                     = 7;
        DeleteMessageContent          deleted                 = 8;
    }
    reserved 3; // ExchangeDataContent
    reserved 4; // NaclBoxEncryptedContent
}
// Raw text content
message TextContent {
    string text = 1 ;
}
// LocalizedAnnouncementContent content is an annoucement that is either a
// localization key that should be translated on client, or a server-side
// translated piece of text.
message LocalizedAnnouncementContent {
    string key_or_text = 1 ;
    // todo: define arguments
}
// Emoji reaction to another message
message ReactionContent {
    // The message ID of the message this reaction is associated with
    MessageId original_message_id = 1 ;
    // The emoji or reaction symbol
    string emoji = 2 ;
}
// Text reply of another message
message ReplyContent {
    // The message ID of the message this reply is referencing
    MessageId original_message_id = 1 ;
    // The reply text, which can be handled similarly to TextContent
    string reply_text = 2 ;
}
message TipContent {
    // The message ID of the message this tip is referencing
    MessageId original_message_id = 1 ;
    // The amount tipped for the message
    common.v1.PaymentAmount tip_amount = 2;
}
message DeleteMessageContent {
    // The message ID of the message that was deleted
    MessageId original_message_id = 1 ;
}
